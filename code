#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Struct to hold keys
typedef struct {
    int n; // Number of roots
    int k; // Minimum number of roots required
} Keys;

// Struct to hold root data
typedef struct {
    int x; // Key (x-coordinate)
    long long y; // Decoded value (y-coordinate)
} Root;

// Function to decode a value from a given base
long long decodeValue(const char *value, int base) {
    long long decoded = 0;
    int len = strlen(value);
    for (int i = 0; i < len; i++) {
        char c = value[len - 1 - i]; // Read from the end for positional value
        int digit = (c >= '0' && c <= '9') ? (c - '0') : (c - 'a' + 10);
        decoded += digit * pow(base, i);
    }
    return decoded;
}

// Function to extract keys from JSON-like input
Keys extractKeys(const char *jsonData) {
    Keys keys = {0, 0};
    sscanf(strstr(jsonData, "\"n\":") + 5, "%d", &keys.n);
    sscanf(strstr(jsonData, "\"k\":") + 5, "%d", &keys.k);
    return keys;
}

// Function to extract roots from the JSON-like input
int extractRoots(const char *jsonData, Root *roots, int maxRoots) {
    int count = 0;
    char *data = strstr(jsonData, "\"1\":");
    while (data && count < maxRoots) {
        int x, base;
        char value[50];
        sscanf(data, "\"%d\": {\n        \"base\": \"%d\",\n        \"value\": \"%s", &x, &base, value);
        roots[count].x = x;
        roots[count].y = decodeValue(value, base);
        count++;
        data = strstr(data + 1, "\"");
    }
    return count;
}

// Function to perform Lagrange interpolation to find the constant term c
long long lagrangeInterpolation(Root *roots, int k) {
    long long c = 0; // Constant term
    for (int i = 0; i < k; i++) {
        long long term = roots[i].y; // Start with y_i
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term *= -roots[j].x;
                term /= (roots[i].x - roots[j].x);
            }
        }
        c += term;
    }
    return c;
}

int main() {
    // Sample JSON input
    const char *jsonData1 = "{ \"keys\": { \"n\": 4, \"k\": 3 }, \"1\": { \"base\": \"10\", \"value\": \"4\" }, \"2\": { \"base\": \"2\", \"value\": \"111\" }, \"3\": { \"base\": \"10\", \"value\": \"12\" }, \"6\": { \"base\": \"4\", \"value\": \"213\" } }";
    const char *jsonData2 = "{ \"keys\": { \"n\": 10, \"k\": 7 }, \"1\": { \"base\": \"6\", \"value\": \"13444211440455345511\" }, \"2\": { \"base\": \"15\", \"value\": \"aed7015a346d63\" }, \"3\": { \"base\": \"15\", \"value\": \"6aeeb69631c227c\" }, \"4\": { \"base\": \"16\", \"value\": \"e1b5e05623d881f\" }, \"5\": { \"base\": \"8\", \"value\": \"316034514573652620673\" }, \"6\": { \"base\": \"3\", \"value\": \"2122212201122002221120200210011020220200\" }, \"7\": { \"base\": \"3\", \"value\": \"20120221122211000100210021102001201112121\" }, \"8\": { \"base\": \"6\", \"value\": \"20220554335330240002224253\" }, \"9\": { \"base\": \"12\", \"value\": \"45153788322a1255483\" }, \"10\": { \"base\": \"7\", \"value\": \"1101613130313526312514143\" } }";

    // Processing first JSON data
    Keys keys1 = extractKeys(jsonData1);
    Root roots1[10]; // Assuming a max of 10 roots
    int count1 = extractRoots(jsonData1, roots1, keys1.n);
    long long secret1 = lagrangeInterpolation(roots1, keys1.k);
    printf("Secret for Test Case 1: %lld\n", secret1);

    // Processing second JSON data
    Keys keys2 = extractKeys(jsonData2);
    Root roots2[10]; // Assuming a max of 10 roots
    int count2 = extractRoots(jsonData2, roots2, keys2.n);
    long long secret2 = lagrangeInterpolation(roots2, keys2.k);
    printf("Secret for Test Case 2: %lld\n", secret2);

    return 0;
}
